apply plugin: 'com.android.application'
apply plugin: 'jacoco-android'
apply plugin: 'org.sonarqube'

android {
    compileSdkVersion 27

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "net.gahfy.chilindoweather"
        minSdkVersion 17
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary true

        buildConfigField('String', 'OPENWEATHERMAP_API_KEY', open_weather_api_key)
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    signingConfigs {
        debug {
            storeFile file("../keystore/chilindo.pks")
            storePassword project.property('key_store_password')
            keyAlias 'release'
            keyPassword project.property('release_password')
        }

        release {
            storeFile file("../keystore/chilindo.pks")
            storePassword project.property('key_store_password')
            keyAlias 'release'
            keyPassword project.property('release_password')
        }
    }

    buildTypes {
        release {
            debuggable true
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            signingConfig signingConfigs.release
        }
    }
}

project.afterEvaluate {
    //Gather build type and product flavor names in a list
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            //Define the sourceName and the sourcePath.
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

                group = "Reporting"
                description =
                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled true
                }

                //Directory where the compiled class files are
                classDirectories =
                        fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                                excludes: ['**/R.class',
                                           // Remove Databinding as they are generated classes
                                           '**/net/gahfy/chilindoweather/databinding/*.*',
                                           // Remove Activity and application as they are dependent to Context
                                           '**/*Activity.class',
                                           '**/net/gahfy/chilindoweather/ChilindoWeatherApplication.class',
                                           // Remove Dependency injection as it is overriden in unit tests
                                           '**/net/gahfy/chilindoweather/injection/*.*',
                                           '**/R$*.class',
                                           '**/*$ViewInjector*.*',
                                           '**/*$ViewBinder*.*',
                                           '**/BuildConfig.*',
                                           '**/Manifest*.*',
                                           '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
                                           '**/*Module.*', // Modules for Dagger.
                                           '**/*Dagger*.*', // Dagger auto-generated code.
                                           '**/*MembersInjector*.*', // Dagger auto-generated code.
                                           '**/*_Provide*Factory*.*',
                                           '**/*_Factory.*', //Dagger auto-generated code
                                           '**/*$*$*.*' // Anonymous classes generated by kotlin
                                ])

                sourceDirectories = files(["src/main/java",
                                           "src/$productFlavorName/java",
                                           "src/$buildTypeName/java"])

                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }
        }
    }
}

sonarqube {
    properties {
        property 'sonar.jacoco.reportPaths', ["$buildDir/jacoco/testDebugUnitTest.exec"]
        property 'sonar.java.junit.reportsPath', "$buildDir/test-results/testDebugUnitTest"
        property 'sonar.tests', "$buildDir/intermediates/classes/test"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:27.1.0"
    implementation "com.android.support:support-v4:27.1.0"
    implementation "com.android.support:design:27.1.0"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

    // Mockito
    testImplementation "org.mockito:mockito-core:2.16.0"

    //Retrofit 2
    implementation "com.squareup.retrofit2:retrofit:2.3.0"
    implementation "com.squareup.retrofit2:adapter-rxjava2:2.3.0"
    implementation "com.squareup.retrofit2:converter-moshi:2.3.0"

    //Rx
    implementation "io.reactivex.rxjava2:rxjava:2.1.9"
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2"

    // Dagger 2
    implementation "com.google.dagger:dagger:2.14.1"
    annotationProcessor "com.google.dagger:dagger-compiler:2.14.1"
    compileOnly "org.glassfish:javax.annotation:3.1.1"
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    // Firebase
    //TODO: Update Firebase version
    //noinspection GradleDependency
    implementation 'com.google.firebase:firebase-auth:11.8.0'
    //noinspection GradleDependency
    implementation 'com.google.android.gms:play-services-auth:11.8.0'

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.6.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.6.1'

    // Gson
    testImplementation "com.google.code.gson:gson:2.8.2"

    // Leak Canary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.4'

    // Timber
    implementation 'com.jakewharton.timber:timber:4.6.1'
}

apply plugin: 'com.google.gms.google-services'