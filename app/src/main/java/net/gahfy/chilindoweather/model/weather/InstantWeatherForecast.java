package net.gahfy.chilindoweather.model.weather;

import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.DrawableRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.StringRes;

import net.gahfy.chilindoweather.R;
import net.gahfy.chilindoweather.model.api.ApiForecastItem;
import net.gahfy.chilindoweather.utils.ContextUtils;
import net.gahfy.chilindoweather.utils.StringUtils;
import net.gahfy.chilindoweather.utils.log.Logger;
import net.gahfy.chilindoweather.utils.unit.UnitUtils;
import net.gahfy.chilindoweather.utils.weather.ConditionUtils;
import net.gahfy.chilindoweather.utils.weather.MeasurementsUtils;
import net.gahfy.chilindoweather.utils.weather.WindUtils;

import static net.gahfy.chilindoweather.utils.unit.UnitUtils.METERS_INDEX;
import static net.gahfy.chilindoweather.utils.weather.WindUtils.WIND_TO_FROM_DIFFERENCE;

public class InstantWeatherForecast implements Parcelable {
    /**
     * The creator used by Parcelable implementations.
     * Code generated by Android Studio.
     */
    static final Creator<InstantWeatherForecast> CREATOR = new Creator<InstantWeatherForecast>() {
        @Override
        public InstantWeatherForecast createFromParcel(Parcel in) {
            return new InstantWeatherForecast(in);
        }

        @Override
        public InstantWeatherForecast[] newArray(int size) {
            return new InstantWeatherForecast[size];
        }
    };
    /**
     * Tag to be used for logging
     */
    private static final String TAG = "InstantWeatherForecast";

    @Nullable
    private final Integer calculationTimestamp;

    @DrawableRes
    private final int conditionIcon;

    @StringRes
    private final int conditionDescription;

    @Nullable
    private final Double temperature;

    @Nullable
    private final Integer windDirection;

    @Nullable
    private final Double windSpeed;

    InstantWeatherForecast(@NonNull final ApiForecastItem apiForecastItem) {
        this.calculationTimestamp = apiForecastItem.getCalculationTimestamp();
        this.conditionIcon = ConditionUtils.getIconResId(apiForecastItem.getCondition());
        this.conditionDescription = ConditionUtils.getDescriptionResId(apiForecastItem.getCondition());
        this.windDirection = WindUtils.getWindDirection(apiForecastItem.getWind());
        this.windSpeed = WindUtils.getWindSpeed(apiForecastItem.getWind());
        this.temperature = MeasurementsUtils.getTemperature(apiForecastItem.getMeasurements());
    }

    /**
     * @author Android Studio Generator
     */
    private InstantWeatherForecast(Parcel in) {
        if (in.readByte() == 0) {
            calculationTimestamp = null;
        } else {
            calculationTimestamp = in.readInt();
        }
        conditionIcon = in.readInt();
        conditionDescription = in.readInt();
        if (in.readByte() == 0) {
            temperature = null;
        } else {
            temperature = in.readDouble();
        }
        if (in.readByte() == 0) {
            windDirection = null;
        } else {
            windDirection = in.readInt();
        }
        if (in.readByte() == 0) {
            windSpeed = null;
        } else {
            windSpeed = in.readDouble();
        }
    }

    /**
     * @author Android Studio Generator
     */
    @Override
    public void writeToParcel(Parcel dest, int flags) {
        if (calculationTimestamp == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeInt(calculationTimestamp);
        }
        dest.writeInt(conditionIcon);
        dest.writeInt(conditionDescription);
        if (temperature == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeDouble(temperature);
        }
        if (windDirection == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeInt(windDirection);
        }
        if (windSpeed == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeDouble(windSpeed);
        }
    }

    /**
     * @author Android Studio Generator
     */
    @Override
    public int describeContents() {
        return 0;
    }

    /**
     * Returns the time to which the forecast applies.
     *
     * @param context Context in which the application is running
     * @return the time to which the forecast applies
     */
    @NonNull
    public String getCalculationTime(@NonNull final Context context) {
        if (calculationTimestamp != null) {
            return StringUtils.formatDate(
                    ContextUtils.getLocale(context),
                    context.getString(R.string.forecast_time_format),
                    calculationTimestamp
            );
        }
        return context.getString(R.string.empty);
    }

    /**
     * Returns the localized temperature.
     *
     * @param context        Context in which the application is running
     * @param preferredIndex the index of preferred unit for temperature
     * @return the localized temperature
     */
    @NonNull
    public final String getTemperature(@NonNull final Context context, int preferredIndex) {
        try {
            if (temperature != null) {
                return context.getString(
                        R.string.temperature_value,
                        MeasurementsUtils.getTemperature(temperature, preferredIndex)
                );
            }
        } catch (IllegalArgumentException e) {
            Logger.e(TAG, e);
        }
        return context.getString(R.string.unknown_temperature);
    }

    /**
     * Returns the localized speed of the wind.
     *
     * @param context             Context in which the application is running
     * @param preferredSpeedIndex the index of preferred unit for speed
     * @return the localized speed of the wind
     */
    @NonNull
    public final String getWindSpeed(@NonNull final Context context, int preferredSpeedIndex) {
        try {
            final Integer userWindSpeed = WindUtils.getWindSpeed(windSpeed, preferredSpeedIndex);

            if (userWindSpeed != null) {
                return context.getString(
                        preferredSpeedIndex == METERS_INDEX ? R.string.wind_speed_metric : R.string.wind_speed_imperial,
                        userWindSpeed
                );
            }
        } catch (IllegalArgumentException e) {
            Logger.e(TAG, e);
        }
        return context.getString(R.string.unknown_wind_speed);
    }

    /**
     * Returns the resource identifier of the icon representing the forecast condition.
     *
     * @return the resource identifier of the icon representing the forecast condition
     */
    @DrawableRes
    public final int getIconResId() {
        return conditionIcon;
    }

    /**
     * Returns the resource identifier of the text description of the forecast condition.
     *
     * @return the resource identifier of the text description of the forecast condition
     */
    @StringRes
    public final int getConditionDescriptionResId() {
        return conditionDescription;
    }

    /**
     * Returns the localized direction of the wind.
     *
     * @param context Context in which the application is running
     * @return the localized direction of the wind
     */
    @NonNull
    public final String getWindDirection(@NonNull final Context context) {
        if (windDirection != null) {
            return context.getString(
                    R.string.wind_direction_value,
                    WindUtils.getWindDirectionNormalized(windDirection),
                    context.getString(WindUtils.getWindDirectionOrientation(windDirection))
            );
        }
        return context.getString(R.string.unknown_wind_direction);
    }

    @Nullable
    final Integer getCalculationTimestamp() {
        return calculationTimestamp;
    }

    /**
     * Returns the angle of rotation for the wind arrow.
     *
     * @return the angle of rotation fot the wind arrow.
     */
    public final int getWindDirectionAngle() {
        return windDirection != null ? windDirection + WIND_TO_FROM_DIFFERENCE : 0;
    }

    public Integer getTemperature(int preferredTemperatureIndex) {
        if (temperature == null) {
            return null;
        } else if (preferredTemperatureIndex == UnitUtils.CELSIUS_INDEX) {
            return (int) (temperature - 273.15);
        } else if (preferredTemperatureIndex == UnitUtils.FAHRENHEIT_INDEX) {
            return (int) (temperature * (9.0 / 5.0) - 459.67);
        } else {
            return temperature.intValue();
        }
    }

    @Nullable
    public Integer getWindDirection() {
        return windDirection;
    }

    @Nullable
    public Integer getWindDirectionNormalized() {
        return windDirection != null ? windDirection % 90 : null;
    }

    @StringRes
    public int getWindDirectionOrientation() {
        if (windDirection != null) {
            switch ((windDirection / 90) % 4) {
                case 0:
                    return R.string.north_abbr;
                case 1:
                    return R.string.east_abbr;
                case 2:
                    return R.string.south_abbr;
                case 3:
                    return R.string.west_abbr;
            }
        }
        return 0;
    }


}
