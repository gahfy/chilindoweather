package net.gahfy.chilindoweather.model.weather;

import android.content.Context;
import android.os.Parcel;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import net.gahfy.chilindoweather.R;
import net.gahfy.chilindoweather.model.api.ApiWeather;
import net.gahfy.chilindoweather.utils.ContextUtils;
import net.gahfy.chilindoweather.utils.StringUtils;
import net.gahfy.chilindoweather.utils.weather.ConditionUtils;
import net.gahfy.chilindoweather.utils.weather.MeasurementsUtils;
import net.gahfy.chilindoweather.utils.weather.WindUtils;

/**
 * The current weather as it is displayed in the application.
 */
public final class CurrentWeather extends AbstractWeather {
    /**
     * The creator used by Parcelable implementations.
     * Code generated by Android Studio.
     */
    public static final Creator<CurrentWeather> CREATOR = new Creator<CurrentWeather>() {
        @Override
        public CurrentWeather createFromParcel(@NonNull final Parcel in) {
            return new CurrentWeather(in);
        }

        @Override
        public CurrentWeather[] newArray(final int size) {
            return new CurrentWeather[size];
        }
    };
    /**
     * Humidity
     */
    @Nullable
    private final Integer humidity;
    /**
     * Atmospheric pressure
     */
    @Nullable
    private final Double atmosphericPressure;
    /**
     * Name of the city to which the current weather applies
     */
    @Nullable
    private final String city;

    /**
     * Instantiates a CurrentWeather from an ApiWeather.
     *
     * @param apiWeather the ApiWeather instance the values must be taken from
     */
    public CurrentWeather(@NonNull final ApiWeather apiWeather) {
        super(
                apiWeather.getCalculationTimestamp(),
                ConditionUtils.getIconResId(apiWeather.getCondition()),
                ConditionUtils.getDescriptionResId(apiWeather.getCondition()),
                MeasurementsUtils.getTemperature(apiWeather.getMeasurements()),
                WindUtils.getWindDirection(apiWeather.getWind()),
                WindUtils.getWindSpeed(apiWeather.getWind())
        );

        humidity = MeasurementsUtils.getHumidity(apiWeather.getMeasurements());
        atmosphericPressure = MeasurementsUtils.getAtmosphericPressure(apiWeather.getMeasurements());
        city = apiWeather.getCityName();
    }

    /**
     * @author Android Studio Generator
     */
    private CurrentWeather(@NonNull final Parcel in) {
        super(in);
        humidity = (in.readByte() == 0) ? null : in.readInt();
        atmosphericPressure = (in.readByte() == 0) ? null : in.readDouble();
        city = in.readString();
    }

    /**
     * @author Android Studio Generator
     */
    @Override
    public final void writeToParcel(@NonNull final Parcel dest, final int flags) {
        super.writeToParcel(dest, flags);

        dest.writeByte((byte) (humidity != null ? 1 : 0));
        if (humidity != null) {
            dest.writeInt(humidity);
        }

        dest.writeByte((byte) (atmosphericPressure != null ? 1 : 0));
        if (atmosphericPressure != null) {
            dest.writeDouble(atmosphericPressure);
        }

        dest.writeString(city);
    }

    /**
     * @author Android Studio Generator
     */
    @Override
    public final int describeContents() {
        return 0;
    }

    /**
     * Returns the localized date and time when the weather has been calculated.
     *
     * @param context Context in which the application is running
     * @return the localized date and time when the weather has been calculated
     */
    @NonNull
    public final String getCalculationDateTime(@NonNull final Context context) {
        if (calculationTimestamp != null) {
            return StringUtils.formatDate(
                    ContextUtils.getLocale(context),
                    context.getString(R.string.calculation_date_format),
                    calculationTimestamp
            );
        }
        return context.getString(R.string.empty);
    }

    /**
     * Returns the localized humidity.
     * @param context Context in which the application is running
     * @return the localized humidity
     */
    @NonNull
    public final String getHumidity(@NonNull final Context context) {
        if (humidity != null) {
            return context.getString(R.string.humidity_value, humidity);
        }
        return context.getString(R.string.unknown_humidity);
    }

    /**
     * Returns the localized atmospheric pressure.
     * @param context Context in which the application is running
     * @return the localized atmospheric pressure
     */
    @NonNull
    public final String getAtmosphericPressure(@NonNull final Context context) {
        if (atmosphericPressure != null) {
            return context.getString(R.string.pressure_value, atmosphericPressure.intValue());
        }
        return context.getString(R.string.unknown_pressure);
    }

    /**
     * Returns the name of the city to which the current weather applies.
     * @return the name of the city to which the current weather applies
     */
    @Nullable
    public final String getCity() {
        return city;
    }
}
