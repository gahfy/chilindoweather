package net.gahfy.chilindoweather.model.weather;

import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.DrawableRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.StringRes;

import net.gahfy.chilindoweather.R;
import net.gahfy.chilindoweather.model.api.ApiMeasurements;
import net.gahfy.chilindoweather.model.api.ApiWeather;
import net.gahfy.chilindoweather.model.api.ApiWind;
import net.gahfy.chilindoweather.utils.StringUtils;
import net.gahfy.chilindoweather.utils.unit.UnitUtils;
import net.gahfy.chilindoweather.utils.weather.ApiConditionUtils;
import net.gahfy.chilindoweather.utils.weather.MeasurementsUtils;
import net.gahfy.chilindoweather.utils.weather.WindUtils;

import static net.gahfy.chilindoweather.utils.weather.WindUtils.WIND_TO_FROM_DIFFERENCE;

/**
 * The current weather as it is displayed in the application.
 */
public final class CurrentWeather implements Parcelable {
    /**
     * The creator used by Parcelable implementations. Code generated by Android Studio.
     */
    public static final Creator<CurrentWeather> CREATOR = new Creator<CurrentWeather>() {
        @Override
        public CurrentWeather createFromParcel(Parcel in) {
            return new CurrentWeather(in);
        }

        @Override
        public CurrentWeather[] newArray(int size) {
            return new CurrentWeather[size];
        }
    };
    /**
     * Timestamp when the weather has been calculated
     */
    @Nullable
    private final Integer calculationTimestamp;
    /**
     * Resource identifier of the icon representing the current condition
     */
    @DrawableRes
    private final int iconResId;
    /**
     * Resource identifier of the text description of the current condition
     */
    @StringRes
    private final int conditionDescription;
    /**
     * Temperature
     */
    @Nullable
    private final Double temperature;
    /**
     * Direction of the wind
     */
    @Nullable
    private final Integer windDirection;
    /**
     * Speed of the wind
     */
    @Nullable
    private final Double windSpeed;
    /**
     * Humidity
     */
    @Nullable
    private final Integer humidity;
    /**
     * Atmospheric pressure
     */
    @Nullable
    private final Double atmosphericPressure;
    /**
     * Name of the city to which the current weather applies
     */
    @Nullable
    private final String city;

    /**
     * Instantiates a CurrentWeather from an ApiWeather.
     *
     * @param apiWeather the ApiWeather instance the values must be taken from
     */
    public CurrentWeather(@NonNull final ApiWeather apiWeather) {
        final ApiMeasurements apiMeasurements = apiWeather.getMeasurements();
        final ApiWind apiWind = apiWeather.getWind();

        calculationTimestamp = apiWeather.getCalculationTimestamp();
        city = apiWeather.getCityName();
        temperature = MeasurementsUtils.getTemperature(apiMeasurements);
        humidity = MeasurementsUtils.getHumidity(apiMeasurements);
        atmosphericPressure = MeasurementsUtils.getAtmosphericPressure(apiMeasurements);
        windDirection = WindUtils.getWindDirection(apiWind);
        windSpeed = WindUtils.getWindSpeed(apiWind);
        iconResId = ApiConditionUtils.getIconResId(apiWeather.getCondition());
        conditionDescription = ApiConditionUtils.getDescriptionResId(apiWeather.getCondition());
    }

    /**
     * Instantiates a CurrentWeather from a Parcel.
     *
     * @param in the Parcel instance the values must be taken from
     * @author Android Studio Generator
     */
    private CurrentWeather(Parcel in) {
        if (in.readByte() == 0) {
            calculationTimestamp = null;
        } else {
            calculationTimestamp = in.readInt();
        }
        iconResId = in.readInt();
        conditionDescription = in.readInt();
        if (in.readByte() == 0) {
            temperature = null;
        } else {
            temperature = in.readDouble();
        }
        if (in.readByte() == 0) {
            windDirection = null;
        } else {
            windDirection = in.readInt();
        }
        if (in.readByte() == 0) {
            windSpeed = null;
        } else {
            windSpeed = in.readDouble();
        }
        if (in.readByte() == 0) {
            humidity = null;
        } else {
            humidity = in.readInt();
        }
        if (in.readByte() == 0) {
            atmosphericPressure = null;
        } else {
            atmosphericPressure = in.readDouble();
        }
        city = in.readString();
    }

    /**
     * Flatten this object in to a Parcel.
     *
     * @param dest The Parcel in which the object should be written.
     * @param flags Additional flags about how the object should be written.
     * May be 0 or {@link #PARCELABLE_WRITE_RETURN_VALUE}.
     * @author Android Studio Generator
     */
    @Override
    public final void writeToParcel(Parcel dest, int flags) {
        if (calculationTimestamp == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeInt(calculationTimestamp);
        }
        dest.writeInt(iconResId);
        dest.writeInt(conditionDescription);
        if (temperature == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeDouble(temperature);
        }
        if (windDirection == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeInt(windDirection);
        }
        if (windSpeed == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeDouble(windSpeed);
        }
        if (humidity == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeInt(humidity);
        }
        if (atmosphericPressure == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeDouble(atmosphericPressure);
        }
        dest.writeString(city);
    }

    @Override
    public final int describeContents() {
        return 0;
    }

    @NonNull
    public String getCalculationDateTime(Context context) {
        if (calculationTimestamp != null) {
            return StringUtils.formatDate(
                    context.getResources().getConfiguration().locale,
                    context.getString(R.string.calculation_date_format),
                    calculationTimestamp
            );
        }
        return context.getString(R.string.empty);
    }

    @NonNull
    public String getWindSpeed(Context context, int preferredSpeedIndex) {
        final Integer userWindSpeed = WindUtils.getWindSpeed(windSpeed, preferredSpeedIndex);

        if (userWindSpeed != null) {
            if (preferredSpeedIndex == UnitUtils.METERS_INDEX || preferredSpeedIndex == UnitUtils.MILES_INDEX) {
                return context.getString(
                        preferredSpeedIndex == UnitUtils.METERS_INDEX ? R.string.wind_speed_metric : R.string.wind_speed_imperial,
                        userWindSpeed
                );
            }
        }
        return context.getString(R.string.unknown_wind_speed);
    }

    @DrawableRes
    public int getIconResId() {
        return iconResId;
    }

    @StringRes
    public int getConditionDescriptionResId() {
        return conditionDescription;
    }

    @NonNull
    public String getWindDirection(Context context) {
        if (windDirection != null) {

            return context.getString(
                    R.string.wind_direction_value,
                    WindUtils.getWindDirectionNormalized(windDirection),
                    context.getString(WindUtils.getWindDirectionOrientation(windDirection))
            );
        }
        return context.getString(R.string.unknown_wind_direction);
    }

    public int getWindDirectionAngle() {
        return windDirection != null ? windDirection + WIND_TO_FROM_DIFFERENCE : 0;
    }

    @NonNull
    public String getHumidity(Context context) {
        if (humidity != null) {
            return context.getString(R.string.humidity_value, humidity);
        }
        return context.getString(R.string.unknown_humidity);
    }

    @NonNull
    public String getAtmosphericPressure(Context context) {
        if (atmosphericPressure != null) {
            return context.getString(R.string.pressure_value, atmosphericPressure.intValue());
        }
        return context.getString(R.string.unknown_pressure);
    }

    @NonNull
    public String getTemperature(Context context, int preferredIndex) {
        if (temperature != null) {
            if (preferredIndex == UnitUtils.CELSIUS_INDEX || preferredIndex == UnitUtils.FAHRENHEIT_INDEX) {
                return context.getString(
                        R.string.temperature_value,
                        MeasurementsUtils.getTemperature(temperature, preferredIndex)
                );
            }
        }
        return context.getString(R.string.unknown_temperature);
    }

    @Nullable
    public String getCity() {
        return city;
    }
}
