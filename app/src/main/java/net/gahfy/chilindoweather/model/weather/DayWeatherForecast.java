package net.gahfy.chilindoweather.model.weather;

import android.content.Context;
import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import net.gahfy.chilindoweather.R;
import net.gahfy.chilindoweather.model.api.ApiForecast;
import net.gahfy.chilindoweather.model.api.ApiForecastItem;
import net.gahfy.chilindoweather.utils.ContextUtils;
import net.gahfy.chilindoweather.utils.DateUtils;
import net.gahfy.chilindoweather.utils.IntegerUtils;
import net.gahfy.chilindoweather.utils.StringUtils;
import net.gahfy.chilindoweather.utils.log.Logger;
import net.gahfy.chilindoweather.utils.weather.CityUtils;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/**
 * The day weather forecasts as they are displayed in the application
 */
public class DayWeatherForecast implements Parcelable {
    /**
     * The creator used by Parcelable implementations.
     * Code generated by Android Studio.
     */
    public static final Creator<DayWeatherForecast> CREATOR = new Creator<DayWeatherForecast>() {
        @Override
        public DayWeatherForecast createFromParcel(@NonNull final Parcel in) {
            return new DayWeatherForecast(in);
        }

        @Override
        public DayWeatherForecast[] newArray(final int size) {
            return new DayWeatherForecast[size];
        }
    };
    /**
     * Tag to be used for logging
     */
    private static final String TAG = "DayWeatherForecast";
    /**
     * Comparator for Day Weather. It is used to sort Day Weather by their date chronologically.
     */
    private static final Comparator<DayWeatherForecast> DAY_WEATHER_FORECAST_COMPARATOR = new Comparator<DayWeatherForecast>() {
        @Override
        public int compare(@NonNull final DayWeatherForecast forecast1, @NonNull final DayWeatherForecast forecast2) {
            if (forecast1.dayTimestamp == null && forecast2.dayTimestamp == null) {
                return 0;
            } else if (forecast1.dayTimestamp == null) {
                return -1;
            } else if (forecast2.dayTimestamp == null) {
                return 1;
            } else {
                return forecast1.dayTimestamp.compareTo(forecast2.dayTimestamp);
            }
        }
    };
    /**
     * Comparator for Instant Weather. It is used to sort Instant Weather by their date chronologically.
     */
    private static final Comparator<InstantWeatherForecast> INSTANT_WEATHER_FORECAST_COMPARATOR = new Comparator<InstantWeatherForecast>() {
        @Override
        public int compare(@NonNull final InstantWeatherForecast forecast1, @NonNull final InstantWeatherForecast forecast2) {
            if (forecast1.getCalculationTimestamp() == null && forecast2.getCalculationTimestamp() == null) {
                return 0;
            } else if (forecast1.getCalculationTimestamp() == null) {
                return -1;
            } else if (forecast2.getCalculationTimestamp() == null) {
                return 1;
            } else {
                return forecast1.getCalculationTimestamp().compareTo(forecast2.getCalculationTimestamp());
            }
        }
    };
    /**
     * The timestamp of the day weather.
     */
    @Nullable
    private final Integer dayTimestamp;

    /**
     * The city to which the day weather applies
     */
    @Nullable
    private final String city;

    /**
     * The list of forecasts
     */
    @NonNull
    private final List<InstantWeatherForecast> forecastList;

    /**
     * Instantiates a DayWeatherForecast.
     *
     * @param dayTimestamp Day to which the forecasts apply
     * @param forecastList The list of forecast for the day
     * @param city         the city to which the forecasts apply
     */
    private DayWeatherForecast(@Nullable final Integer dayTimestamp, @NonNull final List<InstantWeatherForecast> forecastList, @Nullable final String city) {
        this.dayTimestamp = dayTimestamp;
        this.forecastList = forecastList;
        this.city = city;
    }

    /**
     * @author Android Studio Generator
     */
    private DayWeatherForecast(@NonNull final Parcel in) {
        if (in.readByte() == 0) {
            dayTimestamp = null;
        } else {
            dayTimestamp = in.readInt();
        }
        if (in.readByte() == 0) {
            city = null;
        } else {
            city = in.readString();
        }
        forecastList = in.createTypedArrayList(InstantWeatherForecast.CREATOR);
    }

    /**
     * Returns a list of DayWeatherForecast with data of the specified ApiForecast instance.
     *
     * @param apiForecast the API Forecast instance from which the data must be taken.
     * @return a list of DayWeatherForecast with data of the specified ApiForecast instance
     */
    @NonNull
    public static List<DayWeatherForecast> getDayWeatherForecastList(@NonNull final ApiForecast apiForecast) {
        final String city = CityUtils.getCityName(apiForecast.getCity());

        final ArrayList<DayWeatherForecast> dayWeatherForecasts = new ArrayList<>();
        // Adding InstantWeatherForecasts to the list
        if (apiForecast.getForecastItemList() != null) {
            for (final ApiForecastItem apiForecastItem : apiForecast.getForecastItemList()) {
                if (apiForecastItem != null) {
                    addForecastItemToDayWeatherForecastList(dayWeatherForecasts, apiForecastItem, city);
                }
            }
        } else {
            Logger.w(TAG, "apiForecast.getForecastItemList() returned null");
        }

        // Sorting the list
        Collections.sort(dayWeatherForecasts, DAY_WEATHER_FORECAST_COMPARATOR);
        for (DayWeatherForecast dayWeatherForecast : dayWeatherForecasts) {
            Collections.sort(dayWeatherForecast.getForecastList(), INSTANT_WEATHER_FORECAST_COMPARATOR);
        }

        return dayWeatherForecasts;
    }

    /**
     * Inserts the InstantWeatherForecast instance with data from specified apiForecastItem to the
     * specified dayWeatherForecastList.
     *
     * @param dayWeatherForecastList the list in which to add the InstantWeatherForecastInstance
     * @param apiForecastItem        the ApiForecastItem from which the value must be taken to instantiate
     *                               the InstantWeatherForecast
     * @param city                   the city to which the weather forecasts apply
     */
    private static void addForecastItemToDayWeatherForecastList(@NonNull final List<DayWeatherForecast> dayWeatherForecastList, @NonNull final ApiForecastItem apiForecastItem, @Nullable final String city) {
        final InstantWeatherForecast instantWeatherForecast = new InstantWeatherForecast(apiForecastItem);

        final Integer midnightTimestamp = DateUtils.getMidnightTimestamp(apiForecastItem.getCalculationTimestamp());
        boolean found = false;
        for (final DayWeatherForecast dayWeatherForecast : dayWeatherForecastList) {
            if (IntegerUtils.equals(dayWeatherForecast.dayTimestamp, midnightTimestamp)) {
                dayWeatherForecast.getForecastList().add(instantWeatherForecast);
                found = true;
            }
        }
        if (!found) {
            final List<InstantWeatherForecast> forecastList = new ArrayList<>();
            forecastList.add(instantWeatherForecast);
            final DayWeatherForecast dayWeatherForecast = new DayWeatherForecast(midnightTimestamp, forecastList, city);
            dayWeatherForecastList.add(dayWeatherForecast);
        }
    }

    /**
     * @author Android Studio Generator
     */
    @Override
    public final void writeToParcel(@NonNull final Parcel dest, final int flags) {
        if (dayTimestamp == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeInt(dayTimestamp);
        }
        if (city == null) {
            dest.writeByte((byte) 0);
        } else {
            dest.writeByte((byte) 1);
            dest.writeString(city);
        }
        dest.writeTypedList(forecastList);
    }

    /**
     * @author Android Studio Generator
     */
    @Override
    public final int describeContents() {
        return 0;
    }

    /**
     * Returns the list of weather forecasts for the day.
     * @return the list of weather forecasts for the day
     */
    @NonNull
    public List<InstantWeatherForecast> getForecastList() {
        return forecastList;
    }

    /**
     * Returns the city to which the weather forecasts apply.
     *
     * @return the city to which the weather forecasts apply
     */
    @Nullable
    public final String getCity() {
        return city;
    }

    /**
     * Returns the localized day of the weather forecasts.
     * @param context Context in which the application is running
     * @return the localized day of the weather forecasts
     */
    @NonNull
    public final String getDay(@NonNull final Context context) {
        if (dayTimestamp != null) {
            return StringUtils.formatDateWithLongWeekDay(
                    ContextUtils.getLocale(context),
                    context.getString(R.string.date_format_forecast),
                    dayTimestamp,
                    context.getResources().getStringArray(R.array.week_days),
                    context.getResources().getStringArray(R.array.months)
            );
        }
        return context.getString(R.string.empty);
    }

}
